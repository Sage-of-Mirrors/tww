//
// Generated by dtk
// Translation Unit: d_a_tbox.cpp
//

#include "JSystem/JKernel/JKRHeap.h"
#include "JSystem/JUtility/JUTAssert.h"
#include "d/d_bg_s_acch.h"
#include "d/d_bg_w.h"
#include "d/d_cc_d.h"
#include "d/d_com_inf_game.h"
#include "d/d_kankyo.h"
#include "d/d_particle.h"
#include "d/d_procname.h"
#include "d/actor/d_a_player_main.h"
#include "f_op/f_op_actor_mng.h"
#include "m_Do/m_Do_ext.h"
#include "m_Do/m_Do_graphic.h"
#include "m_Do/m_Do_hostIO.h"
#include "m_do/m_Do_mtx.h"
#include "dolphin/types.h"


#define DEMO_PROC_WAIT 0
#define DEMO_PROC_OPEN 1
#define DEMO_PROC_APPEAR 2
#define DEMO_PROC_OPEN_SHORT 3

#define DEMO_PROC_SPRING_TRAP 4

#define FUNC_TYPE_NORMAL 0
#define FUNC_TYPE_SWITCH 1
#define FUNC_TYPE_ENEMIES 2
#define FUNC_TYPE_SWITCH_VISIBLE 3
#define FUNC_TYPE_SWITCH_TRANSPARENT 4
#define FUNC_TYPE_GRAVITY 5
#define FUNC_TYPE_TACT 6
#define FUNC_TYPE_EXTRA_SAVE_INFO 7
#define FUNC_TYPE_EXTRA_SAVE_INFO_SPAWN 8

extern dCcD_SrcCyl dNpc_cyl_src;

struct modelInfo {
    s16 modelId;
    s16 openBckId;
    s16 btkId;
    s16 brkId;
    s16 closedColId;
    s16 openColId;
};

static modelInfo l_modelInfo[] = {
    { 0x000E, 0x0009, 0x0022, 0x001B, 0x002A, 0x002B },
    { 0x000F, 0x0009, 0x0023, 0x001C, 0x002A, 0x002B },
    { 0x0010, 0x0009, 0x0024, 0x001D, 0x002A, 0x002B },
    { 0x0014, 0x0009, 0xFFFF, 0xFFFF, 0x002C, 0x002D }
};

class daTbox_c : public fopAc_ac_c {
public:
    daTbox_c() { }

    s32 commonShapeSet();
    s32 effectShapeSet();
    s32 envShapeSet();
    s32 bgCheckSet();

    void searchRoomNo();
    void lightReady();
    
    BOOL checkEnv();
    BOOL checkOpen();

    modelInfo& getModelInfo();
    
    void clrDzb();
    void setDzb();

    void surfaceProc();
    BOOL checkRoomDisp(int);
    s32 getShapeType();
    s32 getFuncType();
    bool getIsTrap();
    BOOL checkNormal();
    
    s32 CreateHeap();
    void CreateInit();

    s32 boxCheck();
    void lightUpProc();
    void lightDownProc();
    void darkProc();
    void volmProc();

    void demoProcOpen();

    void demoInitAppear_Tact();
    void demoInitAppear();

    void demoProcAppear_Tact();
    void demoProcAppear();

    void demoProcSpringTrap();

    s32 demoProc();

    void OpenInit_com();
    void OpenInit();

    void setCollision();

    bool actionWait();
    bool actionDemo();
    bool actionDemo2();
    bool actionOpenWait();
    bool actionSwOnWait();
    bool actionSwOnWait2();
    bool actionGenocide();

    s32 execute();

    s32 draw();

    /* 0x0290 */ s32 mRoomNo;
    /* 0x0294 */ request_of_phase_process_class mPhs;

    /* 0x029C */ J3DModel* mpChestMdl;
    /* 0x02A0 */ mDoExt_bckAnm mOpenAnm;
    /* 0x02B0 */ mDoExt_btkAnm* mpAppearTexAnm;
    /* 0x02B4 */ mDoExt_brkAnm* mpAppearRegAnm;

    /* 0x02B8 */ dBgW* mpBgWClosed;
    /* 0x02BC */ dBgW* mpBgWOpen;
    /* 0x02C0 */ dBgW* mpBgWVines;

    /* 0x02C4 */ dBgW* mpBgWCurrent;

    /* 0x02C8 */ J3DModel* mpFlashMdl;
    /* 0x02CC */ mDoExt_bckAnm mFlashAnm;
    /* 0x02DC */ mDoExt_btkAnm mFlashTexAnm;
    /* 0x02F0 */ mDoExt_brkAnm mFlashRegAnm;
    
    /* 0x0308 */ u32 m0308;

    /* 0x030C */ mDoExt_brkAnm mBrkAnm3;

    /* 0x0324 */ J3DModel* mpTactPlatformMdl;
    /* 0x0328 */ mDoExt_brkAnm mTactPlatformBrk;

    typedef bool (daTbox_c::*actionFunc)();
    /* 0x0340 */ actionFunc mActionFunc;

    /* 0x034C */ float mInvisibleScrollVal;

    /* 0x0350 */ u32 mStaffId;

    /* 0x0354 */ Mtx mMtx;

    /* 0x0384 */ LIGHT_INFLUENCE mPLight;
    /* 0x03A4 */ LIGHT_INFLUENCE mEfLight;

    /* 0x03C4 */ dPa_smokeEcallBack mSmokeCB;
    /* 0x03E4 */ JPABaseEmitter* mSmokeEmitter;

    /* 0x03E8 */ float mAllColRatio;
    /* 0x03EC */ float m03EC;

    /* 0x03F0 */ u16 mFlags;
    /* 0x03F2 */ u16 mOpenTimer;

    /* 0x03F4 */ bool mHasOpenAnmFinished;
    /* 0x03F5 */ bool mIsFlashPlaying;
    /* 0x03F6 */ u16 mAppearTimer;

    /* 0x03F8 */ u8 mGenocideDelayTimer;

    /* 0x03FC */ dBgS_ObjAcch mObjAcch;
    /* 0x05C0 */ dBgS_AcchCir mAcchCir;
    /* 0x0600 */ dCcD_Stts mColStatus;
    /* 0x063C */ dCcD_Cyl mColCyl;

    /* 0x076C */ u8 mOpenedSwitch;

    void flagOn(u16 flag) { mFlags |= flag; }
    void flagOff(u16 flag) { mFlags &= ~flag; }
    void flagClr() { mFlags = 0; }
    BOOL flagCheck(u16 flag) { return mFlags & flag; }

    request_of_phase_process_class* getPhase() { return &mPhs; }

    u8 getTboxNo() { return fopAcM_GetParam(this) >> 0x07 & 0x1F; }
    int getSwNo() { return fopAcM_GetParam(this) >> 0x0C & 0xFF; }
    u8 getItemNo() { return orig.angle.z >> 8 & 0xFF; }

    bool action() { return (this->*mActionFunc)(); }
    void setAction(actionFunc func) { mActionFunc = func; }
};


/* 00000FE4-00000FF0       .text getFuncType__8daTbox_cFv */
s32 daTbox_c::getFuncType() {
    return fopAcM_GetParam(this) & 0x3F;
}

bool daTbox_c::getIsTrap() {
    return (fopAcM_GetParam(this) & 0x40) != 0;
}

#define TRAP_TIME_FREEZE 0x05
#define TRAP_TIME_MIST_STOP 0x30
#define TRAP_TIME_UNFREEZE 0x60
#define TRAP_TIME_END 0x64

void daTbox_c::demoProcSpringTrap() {
    if (mOpenTimer < TRAP_TIME_END) {
        mOpenTimer++;
    }

    daPy_lk_c* player = (daPy_lk_c*)dComIfGp_getPlayer(0);

    switch (mOpenTimer) {
        case TRAP_TIME_FREEZE:
        {
            player->mNoResetFlg1 |= 0x800;
            player->setDamagePoint(-2.0f);

            fopAcM_seStart(this, JA_SE_LK_FREEZE, 0);
            dComIfGp_particle_set(0x0274, player->getPositionP());

            break;
        }
        case TRAP_TIME_MIST_STOP:
        {
            if (mSmokeEmitter != NULL) {
                mSmokeEmitter->becomeInvalidEmitter();
                mSmokeEmitter = NULL;
            }

            break;
        }
        case TRAP_TIME_UNFREEZE:
        {
            player->mNoResetFlg1 &= ~0x800;

            fopAcM_seStart(this, JA_SE_CM_ICE_BREAK, 0);
            dComIfGp_particle_set(0x0277, player->getPositionP());

            break;
        }
        case TRAP_TIME_END:
        {
            player->mAcch.m_flags &= ~0x04;
            player->mAcch.m_flags |= 0x2000;

            dComIfGp_evmng_cutEnd(mStaffId);
            
            break;
        }
    }
}

/* 00001E4C-0000210C       .text demoProc__8daTbox_cFv */
s32 daTbox_c::demoProc() {
    static char* action_table[] = {
        "WAIT",
        "OPEN",
        "APPEAR",
        "OPEN_SHORT",

        "SPRING_TRAP"
    };

    s32 actionIdx = dComIfGp_evmng_getMyActIdx(mStaffId, action_table, 5, 0, 0);
    bool bIsAdvance = dComIfGp_evmng_getIsAddvance(mStaffId);

    if (bIsAdvance) {
        mHasOpenAnmFinished = false;

        switch (actionIdx) {
            case DEMO_PROC_OPEN:
                OpenInit();
                lightReady();
                mPLight.mPower = 0.0f;
                mEfLight.mPower = 0.0f;
                break;
            case DEMO_PROC_APPEAR:
                flagOn(0x20);
                m03EC = -130.0f;
                
                setDzb();

                if (getFuncType() == FUNC_TYPE_TACT) {
                    flagOff(0x02);
                    demoInitAppear_Tact();
                }
                else {
                    flagOff(0x03);
                    demoInitAppear();
                }

                break;
            case DEMO_PROC_OPEN_SHORT:
                OpenInit_com();
                break;
            case DEMO_PROC_SPRING_TRAP:
                mOpenTimer = 0; // We're re-using this timer for the trap.

                cXyz ptcPos = current.pos + cXyz(0.0f, 5.0f, 0.0f);
                cXyz ptcScale(1.5f, 2.0f, 1.5f);
                csXyz ptcAngle(0x4000, 0, 0);

                mSmokeEmitter = dComIfGp_particle_set(0x029D, &ptcPos, &ptcAngle, &ptcScale);
                break;
        }
    }

    switch (actionIdx) {
        case DEMO_PROC_APPEAR:
            if (getFuncType() == FUNC_TYPE_TACT) {
                demoProcAppear_Tact();
            }
            else {
                demoProcAppear();
            }

            surfaceProc();
            break;
        case DEMO_PROC_OPEN:
            if (mHasOpenAnmFinished) {
                dComIfGp_evmng_cutEnd(mStaffId);
            }
            else {
                if (mOpenAnm.play() != 0) {
                    mHasOpenAnmFinished = true;
                    dComIfGp_evmng_cutEnd(mStaffId);
                    fopAcM_seStart(this, JA_SE_OBJ_TBOX_OPEN_S2, 0);
                }
            }
            break;
        case DEMO_PROC_OPEN_SHORT:
            if (mHasOpenAnmFinished) {
                dComIfGp_evmng_cutEnd(mStaffId);
            }
            else {
                if (mOpenAnm.play() != 0) {
                    mHasOpenAnmFinished = 1;
                    dComIfGp_evmng_cutEnd(mStaffId);
                    fopAcM_seStart(this, JA_SE_OBJ_TBOX_OPEN_S2, 0);
                }
            }
            break;
        case DEMO_PROC_SPRING_TRAP:
            demoProcSpringTrap();
            break;
        default:
            dComIfGp_evmng_cutEnd(mStaffId);
            break;
    }

    if (flagCheck(0x10)) {
        demoProcOpen();
    }

    if (flagCheck(0x08)) {
        dKy_set_allcol_ratio(mAllColRatio);
    }

    return 0;
}

/* 00002634-000027C8       .text actionOpenWait__8daTbox_cFv */
bool daTbox_c::actionOpenWait() {
    if (mEvtInfo.checkCommandDoor()) {
        dComIfGp_event_onEventFlag(0x04);

        if (!getIsTrap()) {
            u8 itemNo = getItemNo();
            s32 itemId = fopAcM_createItemForTrBoxDemo(&current.pos, itemNo, -1, -1, NULL, NULL);

            if (itemId != 0xFFFFFFFF) {
                dComIfGp_event_setItemPartnerId(itemId);
            }
        }

        setAction(&daTbox_c::actionDemo);

        mStaffId = dComIfGp_evmng_getMyStaffId("TREASURE", NULL, 0);
        demoProc();
    }
    else {
        if (boxCheck()) {
            mEvtInfo.onCondition(0x04);

            if (getIsTrap()) {
                mEvtInfo.setEventName("DEFAULT_TREASURE_TRAP");
            }
            else {
                mEvtInfo.setEventName("DEFAULT_TREASURE_A");
            }
        }
    }

    return true;
}
